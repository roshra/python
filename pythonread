

# Single line comments 
Start with #

# Multiline comments 
These would consume memory , the memory is allocated 
but garbage collection later removes it								
Tripple double quotes """
Tripple single quotes '''

# Built in data types
	None Type
	Numeric Type
	Sequences 
	sets 
	Mappings 

#None Type : 
	Data type does not conatin any value, in java its null object
	it can be used as default value of an argument
	if calling a function no value is passed, the default value will be null
	in boolean expression the null represetns as false

#Numeric Types:
	int , float , complex

	int is with out fractions , without decimals 
	it will contain the negative and positive numbers
	no limit in python to store the numbers
	a = -57

#float is with decimals
	num = 55.67998
	we can also use the exponentiation 
	2.5 * 10 power 4 can be written as 2.5E4
	x = 2.5E4 
	here x will be automatically taken as float data type

#complex numbers
	python program to add two complex numbers
	c1 = 2.5 + 2.5J
	c2 = 3.0 - 0.5J
	sum = c1 + c2
	print("sum = ", sum)

# Data type conversion
# Python program converts octal, binary and hex to decimal number system

s1 = "17"
s2 = "11100101"
s3 = "1c2"

n1 = int(s1,8)
n2 = int(s2,2)
n3 = int(s1,16)
print ("octal 17 converted to decimal value is : ",n1)
print ("binary 2 converted to decimal value is : ",n2)
print ("Hex 16 converted to decimal value is : ",n3)

Or

a = 10
b = bin(a)
print("value of binary b is ", b)

b = oct(a)
print("value of oct b is ", b)

b = hex(a)
print("value of hex b is ", b)

# Bool data type
a = 10
b = 20
if(a < b): print("value of a is greater than b : if condition is a bool true")

# String data type 
str1 = "Welcome1"
str2 = "weclome2"
str3 = """this is tripple quotes str3"""
str4 = '''this is tripple quotes str4'''
print("printing str1 ", str1)
print("printing str2 ", str2)
# Print single index
print(str1[0])
# Print index from 0 to 5
print(str1[0:6])
# Print index from end
print ("printing str1 from end ", str1[-4])
# Print * 2
print("printing str1 two times " , str1*2)
# Print str3
print("printing str3 ", str4)

# Byte Data type

A Byte number ranges from positive integers from 0 - 255
# includes numbers from 0-255 (included) - do not store negative numbers
# This is list of byte numbers
elements = [20,10,0,40]
# convert list into byte array
x = bytes(elements)
print("list now convered to byte array ", x[0])
for i in x: print(i)

# Bytearray Data Type
# The bytearray datatype is similar to bytes datatype
# The bytes type array cannot be modified but the bytearray type can be modified
# list of bytearray
elements = [10,20,0,40]
# list is now convered to bytearray
x = bytearray(elements)
print(elements[0])
x[0] = 80
print ("value of first element is modified as ", x[0])
for i in x: print(i)

# list Data Type
List of represents a group of elements
Main difference between the list and array is 
a list can store dofferent types of data 
example 
list = [10,20,15.5, 'rosh', "mary"]
slicing operation [0:3] represents elements from 0th to 2nd element
10,20,15.5

list = [10,20,15.5,"rosh", 'mary']
print("printing all the elements in list ",list)
print("printing 0th element in list ", list[0])
print("printing 0th to 2nd elements in list ", list[0:3])
print("printing last element of the list", list[-1])
print("duplicating the list ", list * 2)
list can be modified 

# Tuple data type

Tuple are like list and can have different data types
Tuples are read only list and can't be modified 
    tuple[0] = 80
TypeError: 'tuple' object does not support item assignment

# tuple is a mix of different data types enclosed in parentheses seperated by comans
tuple = (10,-20,15.5, 'rosh', 'mary')
print("first tuple element ", tuple[0])

# tuple can't be modified and will give an error
tuple[0] = 80

Tuples are enclosed in parantheses 
tuple(10,-20,15.5,'rosh',"mary")

# Range data type
represents sequence of numbers
the numbers in range are not modifiable
range is used for repeating for loop for specific number of times
r = range(10)
for i in r: print(r)
above statement will display 0 to 9

another usage:
we can also use starting number
ending number and step value in range object
r = range(30,40,2)
for i in r: print(r)
range object with starting number 30 and ending number 39
the step size is 2
r = range(10)
for i in r: print(i)

l = range(30,40,2)
for j in l:print(j)

b = list(range(4))
print(b)
 
# Sets 
set is unordered collection of elements much like a set in matematics
order of elements is not maintained in set
the elements may not appear in same way as they are entered into the set
set do not accept duplicate values
two subtypes :
set datatype
frozenset datatatype
to create a set we should enter elements seperated by commas inside curly braces {}
s = {10,20,30,40,50}
print(s) 

another method of creating set 
# set converts a list to a set - using a set keyword
ch = set('HELLO')
print(ch)
since sets are un-ordered we can not retrieve elements using indexing or slising 
lst = [1,2,3,4,5]
s = set(lst)
print(s)


update method in set :
used to add two elements to the set 
s.update[50,60]:
print(s)

remove method in set : 
used to remove element off the set 
s.remove(50)
print(s)

# frozenset data type
same as set datatype
the element in set can be modified but elements in frozenset datatype can't be modified
s = {10,20,30,40,40}
print(s)
fs = frozenset(s)
print("printing frozenset data type ", fs)

fs1 = frozenset("hello")
print("printing another way of initiating frozenset ", fs1)

frozenset works exactly same as set but with above differences 
update and remove methods wont work on frozenset data type

# Mapping Types
Map represents a group of elements in form of key:value pair
dict data typ is example of map
dict represents dictionary
key and value should be seperated by colon
every par should be seperated by comma
all elements shouls be inside curly braces
d = {10:'rosh', 11:'dan', 12:'puppy'}
d is dictionary , 10 is key and rosh is value associated with key

we can also create empty dictionary 
d = {}
update key:value pair in empty d
d[10] = 'rosh'
d[11] = 'puppy'
print(d)
 
Delete key:
del d[10]

d = {}
d[1] = 'rosh'
d[2] = 'putty'
d[3] = 'camy'
print("printing dictionary d ", d)
print("printing all dictionary keys " , d.keys())
print("printing all dictionary values ", d.values())
del d[1]
print("printing dictionary post deletion of a pair ", d)

# Literals in Python
literal value stored inside the variable
a = 15
a is variable 
15 is literal
since 15 is integer, its called integer literal 
Types of literal
1. Numeric literal
Integer literal : 450,-15
Float literal   : 3.24
Hexadecimal literal : 0x55A
Octal literal : 0557
Binary literal : 0B01001
Complex literal : 18+3J

2. Boolean literal
true or false

3. String literal
single quote ' '
double quotes " "
tripple quotes """or'''
s1 = 'this is first'
s2 = "core python"
when single literal exceeds beyond line then use tripple quotes
s3 = '''this is indian book
hello'''
s4 """ pee pee
i am here"""

s1 = "This is \n python "
print("print using new line continuation \n" , s1)
print("print using new line continuation \\ displays single \ " , s1)
print ("print using single quote \' ", s1)
print ("print using single quote \" ", s1)
print ("print using backspace \b ", s1)
print ("print using enter will not print here this line \r ", s1)
print ("print using tab \t ", s1)
print ("print using virtical tab \v ", s1)
print ("print using backspace \n ", s1)

# Determining data types
a = 15
print(type(a))


# Python file handeling , create , open , append , read , write 

How to create a text file 
f = open("guru99.txt", "w+")


# LOOPS

if statement
------------

elif statement is short for else if 
x = int(input("please enter an integer: "))
please enter an integer: >? 42
x
42
if x < 0:
    x = 0
elif x == 0:
    print("zero")
elif x == 1:
    print('single')
else: 
    print('More')
    
More
 



for statement
-------------
# strings : words is a list 
words = ['cats' , 'window', 'birds']
for w in words:
    print(w,len(w))
    
cats 4
window 6
birds 5

--------------------------------------------
words
['mangomovie', 'cat', 'birds', 'mangomovie']
for w in words[:]: # this will loop over entire list 
    if len(w) > 6:
        words.insert(0,w) # insert(index,object)- so 0th index it insert value of w at begining 

print(words)        
['mangomovie', 'mangomovie', 'mangomovie', 'cat', 'birds', 'mangomovie']


-----------------------------------------------------------------------------

Things to know 

# len()
How to check length of string 
len(variable name)
example : 
a = 6
len(a)

# range()

If you need to iterate over sequence of numbers, built in function range comes handy
for i in range(5):
    print(i)
    
0
1
2
3
4

Another example : 

range, that prints from a specific point 
for i in range(5,10):
    print(i)
    
5
6
7
8
9

Another example : range

for i in range(0,10,3):
    print(i)
    
0
3
6
9


Another example : range

for i in range(-10, -100, -30):
    print(i)
    
-10
-40
-70

Another example : range and len

a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
    print(i, a[i])
    
0 Mary
1 had
2 a
3 little
4 lamb


Another example:
Interator 
list(range(5))
[0, 1, 2, 3, 4]


# Break and Continue statement

>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3

# Continue statement

for num in range(2,10):
    if num % 2 == 0:
        print ('found an even number', num)
        continue
    print('found a number', num)
    
found an even number 2
found a number 3
found an even number 4
found a number 5
found an even number 6
found a number 7
found an even number 8
found a number 9


# Functions in python

def fib(n):
    a , b = 0 , 1
    while a < n:
        print(a, end=' ')
        a , b = b , a+b
    print()
fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

Def should be followed by function name and parenthesized list of parameters

fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 
fib(100)
0 1 1 2 3 5 8 13 21 34 55 89 
fib(5)
0 1 1 2 3 
fib(0)


It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it:



Reference
https://docs.python.org/3/tutorial/: 
https://developers.google.com/edu/python/lists
